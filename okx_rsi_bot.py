import os
import logging
from datetime import datetime
from typing import Dict, List, Tuple
from dotenv import load_dotenv
import ccxt
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("7713878854:AAFEDuZNkxKyzRIzuIHzootvoChkqS6_t7E")
OKX_API_KEY = os.getenv("6a4d18db-08e7-4352-b897-3a9fa2abe80e", "")
OKX_SECRET = os.getenv("78290AEF605ADB6EF8D8F601387B4AE8", "")
OKX_PASSPHRASE = os.getenv("Art23031987!", "")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_PAIR, SELECT_TIMEFRAME, SELECT_RSI_LEVELS, CONFIRM_ALERT = range(4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OKX API
exchange = ccxt.okx(
    {
        "apiKey": OKX_API_KEY,
        "secret": OKX_SECRET,
        "password": OKX_PASSPHRASE,
        "enableRateLimit": True,
    }
)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PostgreSQL –∏–ª–∏ –¥—Ä—É–≥—É—é –°–£–ë–î)
user_alerts = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RSI –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö OKX.\n"
        "–Ø –º–æ–≥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å, –∫–æ–≥–¥–∞ RSI –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_alert - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ\n"
        "/my_alerts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
        "/remove_alert - —É–¥–∞–ª–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ"
    )


async def add_alert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤
    markets = exchange.load_markets()
    futures_pairs = [
        symbol for symbol in markets if markets[symbol]["future"] and "USDT" in symbol
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(pair, callback_data=f"pair_{pair}")]
        for pair in futures_pairs[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:", reply_markup=reply_markup
    )

    return SELECT_PAIR


async def select_pair(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text(text="–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É
    pair = query.data.replace("pair_", "")
    context.user_data["selected_pair"] = pair

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º
    timeframes = ["1m", "5m", "15m", "30m", "1h", "4h", "1d"]
    keyboard = [
        [InlineKeyboardButton(tf, callback_data=f"timeframe_{tf}") for tf in timeframes]
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {pair}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
        reply_markup=reply_markup,
    )

    return SELECT_TIMEFRAME


async def select_timeframe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text(text="–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
    timeframe = query.data.replace("timeframe_", "")
    context.user_data["selected_timeframe"] = timeframe

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ RSI
    await query.edit_message_text(
        text=(
            f"–ü–∞—Ä–∞: {context.user_data['selected_pair']}\n"
            f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–Ω–∏ RSI –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30,70):"
        )
    )

    return SELECT_RSI_LEVELS


async def select_rsi_levels(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É—Ä–æ–≤–Ω–µ–π RSI"""
    try:
        levels = [float(level.strip()) for level in update.message.text.split(",")]
        if not all(0 <= level <= 100 for level in levels):
            raise ValueError("–£—Ä–æ–≤–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 100")

        context.user_data["rsi_levels"] = levels

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        pair = context.user_data["selected_pair"]
        timeframe = context.user_data["selected_timeframe"]
        levels_str = ", ".join(map(str, levels))

        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text=(
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n\n"
                f"–ü–∞—Ä–∞: {pair}\n"
                f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n"
                f"–£—Ä–æ–≤–Ω–∏ RSI: {levels_str}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
            ),
            reply_markup=reply_markup,
        )

        return CONFIRM_ALERT

    except Exception as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–Ω–∏ RSI —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30,70):"
        )
        return SELECT_RSI_LEVELS


async def confirm_alert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text(text="–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    user_id = update.effective_user.id
    pair = context.user_data["selected_pair"]
    timeframe = context.user_data["selected_timeframe"]
    levels = context.user_data["rsi_levels"]

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    alert_id = f"{user_id}_{pair}_{timeframe}_{'_'.join(map(str, levels))}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
    if user_id not in user_alerts:
        user_alerts[user_id] = {}

    user_alerts[user_id][alert_id] = {
        "pair": pair,
        "timeframe": timeframe,
        "levels": levels,
        "last_notification": {level: None for level in levels},
    }

    await query.edit_message_text(
        text="–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
        f"–ü–∞—Ä–∞: {pair}\n"
        f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n"
        f"–£—Ä–æ–≤–Ω–∏ RSI: {', '.join(map(str, levels))}"
    )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


async def my_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    if user_id not in user_alerts or not user_alerts[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")
        return

    message = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n\n"
    for alert_id, alert in user_alerts[user_id].items():
        message += (
            f"üîπ –ü–∞—Ä–∞: {alert['pair']}\n"
            f"   –¢–∞–π–º—Ñ—Ä–µ–π–º: {alert['timeframe']}\n"
            f"   –£—Ä–æ–≤–Ω–∏ RSI: {', '.join(map(str, alert['levels']))}\n\n"
        )

    await update.message.reply_text(message)


async def remove_alert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    if user_id not in user_alerts or not user_alerts[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = [
        [InlineKeyboardButton(
            f"{alert['pair']} {alert['timeframe']} {alert['levels']}",
            callback_data=f"remove_{alert_id}",
        )]
        for alert_id, alert in user_alerts[user_id].items()
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_remove")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup
    )


async def confirm_remove_alert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_remove":
        await query.edit_message_text(text="–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    user_id = update.effective_user.id
    alert_id = query.data.replace("remove_", "")

    if user_id in user_alerts and alert_id in user_alerts[user_id]:
        del user_alerts[user_id][alert_id]
        await query.edit_message_text(text="–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    else:
        await query.edit_message_text(text="–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def calculate_rsi(prices: List[float], period: int = 14) -> float:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ RSI"""
    if len(prices) < period + 1:
        return 50  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

    deltas = pd.Series(prices).diff()
    gains = deltas.where(deltas > 0, 0)
    losses = -deltas.where(deltas < 0, 0)

    avg_gain = gains.rolling(window=period).mean().iloc[-1]
    avg_loss = losses.rolling(window=period).mean().iloc[-1]

    if avg_loss == 0:
        return 100 if avg_gain != 0 else 50

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))

    return rsi


async def check_rsi_alerts(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RSI –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    for user_id, alerts in user_alerts.items():
        for alert_id, alert in alerts.items():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
                candles = exchange.fetch_ohlcv(
                    alert["pair"], alert["timeframe"], limit=30
                )
                closes = [candle[4] for candle in candles]

                # –í—ã—á–∏—Å–ª—è–µ–º RSI
                rsi = calculate_rsi(closes)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏
                for level in alert["levels"]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫ –ª–∏ RSI —É—Ä–æ–≤–µ–Ω—å
                    if (
                        alert["last_notification"][level] is not None
                        and ((alert["last_notification"][level] < level and rsi >= level)
                        or (alert["last_notification"][level] > level and rsi <= level))
                    ):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        message = (
                            f"üö® RSI ALERT üö®\n\n"
                            f"–ü–∞—Ä–∞: {alert['pair']}\n"
                            f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {alert['timeframe']}\n"
                            f"–¢–µ–∫—É—â–∏–π RSI: {rsi:.2f}\n"
                            f"–£—Ä–æ–≤–µ–Ω—å: {level}"
                        )
                        await context.bot.send_message(chat_id=user_id, text=message)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI
                    alert["last_notification"][level] = rsi

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ RSI –¥–ª—è {alert_id}: {str(e)}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("my_alerts", my_alerts))
    application.add_handler(CommandHandler("remove_alert", remove_alert))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add_alert", add_alert)],
        states={
            SELECT_PAIR: [CallbackQueryHandler(select_pair)],
            SELECT_TIMEFRAME: [CallbackQueryHandler(select_timeframe)],
            SELECT_RSI_LEVELS: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_rsi_levels)],
            CONFIRM_ALERT: [CallbackQueryHandler(confirm_alert)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    application.add_handler(
        CallbackQueryHandler(confirm_remove_alert, pattern="^remove_")
    )
    application.add_handler(
        CallbackQueryHandler(cancel, pattern="^cancel_remove$")
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É RSI
    job_queue = application.job_queue
    job_queue.run_repeating(check_rsi_alerts, interval=60.0, first=10.0)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
